{"version":3,"sources":["components/Calendar.js","App.js","reportWebVitals.js","index.js"],"names":["DemoApp","finishDate","Date","daysOfYear","d","setDate","getDate","push","days","this","getDays","arrWorks","inverseArr","currentDay","display","color","inverseDay","reduce","prev","current","idx","start","toISOString","split","end","locale","ruLocale","height","width","plugins","dayGridPlugin","initialView","events","getEvents","Component","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6RAKqBA,E,6JACnB,WAIE,IAHA,IAAMC,EAAa,IAAIC,KAAK,KAAM,EAAG,GAC/BC,EAAa,GAEVC,EAAI,IAAIF,KAAK,KAAM,EAAG,GAAIE,EAAIH,EAAYG,EAAEC,QAAQD,EAAEE,UAAY,GACzEH,EAAWI,KAAK,IAAIL,KAAKE,IAG3B,OAAOD,I,uBAGT,WACE,IAAMK,EAAOC,KAAKC,UACZC,EAAW,GACXC,EAAa,GAEfC,EAAa,CACfC,QAAS,aACTC,MAAO,WAGLC,EAAa,CACfF,QAAS,cAiBX,OAdAN,EAAKS,QAAO,SAACC,EAAMC,EAASC,GAW1B,OAVIA,EAAM,IAAM,GACdP,EAAWQ,MAAQH,EAAKI,cAAcC,MAAM,KAAK,GACjDV,EAAWW,IAAML,EAAQG,cAAcC,MAAM,KAAK,GAClDZ,EAASJ,KAAT,eAAkBM,KACTO,EAAM,IAAM,IACrBJ,EAAWK,MAAQH,EAAKI,cAAcC,MAAM,KAAK,GACjDP,EAAWQ,IAAML,EAAQG,cAAcC,MAAM,KAAK,GAClDX,EAAWL,KAAX,eAAoBS,KAGfG,IACN,IAAIjB,KAAK,KAAM,EAAG,IAEf,GAAN,OAAWS,EAAaC,K,oBAG1B,WACE,OACE,cAAC,IAAD,CACEa,OAAQC,IACRC,OAAQ,IACRC,MAAO,IACPC,QAAS,CAAEC,KACXC,YAAY,eACZC,OAAQvB,KAAKwB,kB,GAnDgBC,a,MCctBC,MAff,WACE,OACE,qBAAKC,UAAU,OAAf,SACE,sBAAKA,UAAU,aAAf,UACE,qBAAKA,UAAU,iBAAf,oEAGA,qBAAKA,UAAU,iBAAf,SACE,cAAC,EAAD,YCAKC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.b148d93c.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport FullCalendar from '@fullcalendar/react'; // must go before plugins\r\nimport dayGridPlugin from '@fullcalendar/daygrid'; // a plugin!\r\nimport ruLocale from '@fullcalendar/core/locales/ru';\r\n\r\nexport default class DemoApp extends Component {\r\n  getDays() {\r\n    const finishDate = new Date(2025, 0, 1);\r\n    const daysOfYear = [];\r\n\r\n    for (let d = new Date(2021, 0, 2); d < finishDate; d.setDate(d.getDate() + 2)) {\r\n      daysOfYear.push(new Date(d));\r\n    }\r\n\r\n    return daysOfYear;\r\n  }\r\n\r\n  getEvents() {\r\n    const days = this.getDays();\r\n    const arrWorks = [];\r\n    const inverseArr = [];\r\n\r\n    let currentDay = {\r\n      display: 'background',\r\n      color: '#ff9f89'\r\n    };\r\n\r\n    let inverseDay = {\r\n      display: 'background'\r\n    };\r\n\r\n    days.reduce((prev, current, idx) => {\r\n      if (idx % 2 === 0) {\r\n        currentDay.start = prev.toISOString().split('T')[0];\r\n        currentDay.end = current.toISOString().split('T')[0];\r\n        arrWorks.push({...currentDay});\r\n      } else if (idx % 2 !== 0) {\r\n        inverseDay.start = prev.toISOString().split('T')[0];\r\n        inverseDay.end = current.toISOString().split('T')[0];\r\n        inverseArr.push({...inverseDay});\r\n      }\r\n\r\n      return current;\r\n    }, new Date(2021, 0, 2));\r\n\r\n    return [...arrWorks, ...inverseArr];\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <FullCalendar\r\n        locale={ruLocale}\r\n        height={700}\r\n        width={700}\r\n        plugins={[ dayGridPlugin ]}\r\n        initialView=\"dayGridMonth\"\r\n        events={this.getEvents()}\r\n      />\r\n    )\r\n  }\r\n}\r\n","import React from 'react';\nimport Calendar from './components/Calendar';\nimport './App.scss';\n\nfunction App() {\n  return (\n    <div className=\"work\">\n      <div className=\"work__view\">\n        <div className=\"work__settings\">\n          Настройки\n        </div>\n        <div className=\"work__calendar\">\n          <Calendar />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}